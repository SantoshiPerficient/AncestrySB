//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class AncestrySFSC_AutocreatedRegHandler implements Auth.RegistrationHandler{
    global boolean canCreateUser(Auth.UserData data) {
        //TODO: Check whether we want to allow creation of a user with this data
        //Set<String> s = new Set<String>{'usernamea', 'usernameb', 'usernamec'};
        //if(s.contains(data.username)) {
        //return true;
        //}
        //
        Profile p;
        if(data.attributeMap.containsKey('sfdc_networkid')) {
            
           Network network = [select name from network where id =: data.attributeMap.get('sfdc_networkid')];
            System.debug('>>>network'+network);
            Map<String, AncestrySFSC_CommunityToLocaleMap__c> mcs = AncestrySFSC_CommunityToLocaleMap__c.getAll();
            System.debug('>>>mcs'+mcs);
            String profileName = mcs.get(network.name).ProfileName__c;
            System.debug('>>>profileName'+profileName);
            p = [SELECT Id FROM profile WHERE name= :profileName];
        }else{
            p = [SELECT Id FROM profile WHERE name='Standard User'];
        }
        List<User> userlst = [select id from user where profileId = :p.id and email =:data.email];
        if(userlst.isEmpty()){
            return true;
            
        }
        return false;
    }
    
    global User createUser(Id portalId, Auth.UserData data){
        System.debug('>>>data:'+data);
        if(!canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            return null;
        }
        if(data.attributeMap.containsKey('sfdc_networkid')) {
            //We have a community id, so create a user with community access
            //TODO: Get an actual account
            /*    Account a = [SELECT Id FROM account WHERE name='Acme'];
Contact c = new Contact();
c.accountId = a.Id;
c.email = data.email;
c.firstName = data.firstName;
c.lastName = data.lastName;
insert(c);*/
            Id personAccountId= Schema.Sobjecttype.Account.getRecordTypeInfosByName().get('Person Account').getRecordTypeId();
            Account acc = new Account();
            acc.firstName = data.firstName;
            acc.lastName = data.lastName;
            acc.PersonEmail = data.email;
            acc.recordTypeId = personAccountId;
            insert acc;
            Account inserted = [select id, PersonContactId from account where id =:acc.id];
            
            //TODO: Customize the username and profile. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters or less.
            User u = new User();
            Network network = [select name from network where id =: data.attributeMap.get('sfdc_networkid')];
            System.debug('>>>network'+network);
            Map<String, AncestrySFSC_CommunityToLocaleMap__c> mcs = AncestrySFSC_CommunityToLocaleMap__c.getAll();
            System.debug('>>>mcs'+mcs);
            String profileName = mcs.get(network.name).ProfileName__c;
            String userNameSuffix = mcs.get(network.name).UserNameSuffix__c;
            System.debug('>>>profileName'+profileName);
            Profile p = [SELECT Id FROM profile WHERE name= :profileName];
            u.username = data.email+'.'+userNameSuffix;
            u.email = data.email;
            u.lastName = data.lastName;
            u.firstName = data.firstName;
            u.CommunityNickname = data.email.subString(0,data.email.indexOf('@'));
            List<User> users = [Select Id from user where CommunityNickname= : u.CommunityNickname];
            if(users!=null && users.size()>0){
                u.CommunityNickname += String.valueOf(Crypto.getRandomInteger()).substring(1,3);
            }
            String alias = data.email.subString(0,data.email.indexOf('@'));
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            
            //populate the locale information
            if(mcs.containsKey(network .name)){
                u.put('TimeZoneSidKey',mcs.get(network.name).Time_Zone__c);
                u.put('LocaleSidKey',mcs.get(network.name).Locale__c);
                u.put('LanguageLocaleKey',mcs.get(network.name).Language__c);
            }
            
            //   u.languagelocalekey = UserInfo.getLocale();
            // u.localesidkey = UserInfo.getLocale();
            u.emailEncodingKey = 'UTF-8';
            //u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            u.contactId = inserted.PersonContactId ;
            return u;
        } else {
            //This is not a community, so create a regular standard user
            User u = new User();
            Profile p = [SELECT Id FROM profile WHERE name='Standard User'];
            //TODO: Customize the username. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters
            //or less.
            u.username = data.email;
            u.email = data.email;
            u.lastName = data.lastName;
            u.firstName = data.firstName;
            String alias = data.username;
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            u.alias = alias;
            u.languagelocalekey = UserInfo.getLocale();
            u.localesidkey = UserInfo.getLocale();
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            return u;
        }
    }
    
    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        User u = new User(id=userId);
        //TODO: Customize the username. Must be 80 characters or less.
        u.username = data.email;
        u.email = data.email;
        u.lastName = data.lastName;
        u.firstName = data.firstName;
        //String alias = data.username;
        //Alias must be 8 characters or less
        //if(alias.length() > 8) {
        //alias = alias.substring(0, 8);
        //}
        //u.alias = alias;
        update(u);
    }
}